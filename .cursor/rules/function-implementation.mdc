---
description:
globs:
alwaysApply: false
---
# 函数实现指导

## 添加新的工具函数

### 1. 选择合适的文件

- **Lodash 风格函数**: 添加到 [src/lodash.js](mdc:src/lodash.js)
- **Ramda 风格函数**: 添加到 [src/ramda.js](mdc:src/ramda.js)
- **React 相关**: 添加到 [src/react-interview.js](mdc:src/react-interview.js)

### 2. 函数实现模板

```javascript
/**
 * 函数功能描述
 * @param {type} param1 - 参数1描述
 * @param {type} param2 - 参数2描述
 * @returns {type} 返回值描述
 * @example
 * functionName(arg1, arg2)
 * // => expectedResult
 */
const functionName = (param1, param2) => {
  // 实现逻辑
  return result;
};
```

### 3. 实现原则

1. **性能优化**: 考虑时间复杂度和空间复杂度
2. **边界处理**: 处理空值、undefined、空数组等边界情况
3. **类型安全**: 进行必要的类型检查
4. **函数式编程**: 优先使用不可变数据结构，避免修改原始数据

### 4. 测试用例

每个函数都需要在对应的测试文件中添加测试用例：

```javascript
describe('functionName', () => {
  test('正常情况测试', () => {
    expect(functionName(input)).toEqual(expectedOutput);
  });

  test('边界情况测试', () => {
    expect(functionName(null)).toEqual(expectedResult);
    expect(functionName(undefined)).toEqual(expectedResult);
    expect(functionName([])).toEqual(expectedResult);
  });

  test('错误情况测试', () => {
    expect(() => functionName(invalidInput)).toThrow();
  });
});
```

### 5. 文档更新

在 [README.md](mdc:README.md) 中添加函数说明：
1. 在对应章节的函数列表中添加链接
2. 添加详细的函数说明和示例代码
3. 说明实现思路和时间复杂度

## 常见实现模式

### 数组操作
- 使用 `Array.from()`, `map()`, `filter()`, `reduce()` 等高阶函数
- 考虑使用扩展运算符进行数组复制和合并
- 注意处理稀疏数组的情况

### 对象操作
- 使用 `Object.keys()`, `Object.values()`, `Object.entries()` 进行遍历
- 使用 `Object.assign()` 或扩展运算符进行对象合并
- 考虑原型链和不可枚举属性的处理

### 函数式编程
- 实现柯里化和偏函数应用
- 使用闭包保存状态
- 实现组合函数和管道操作
