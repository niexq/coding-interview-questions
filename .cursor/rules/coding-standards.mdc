---
description:
globs:
alwaysApply: false
---
# 编码规范

## 代码风格

项目使用 ESLint + Prettier 进行代码格式化和规范检查，配置文件为 [.eslintrc.js](mdc:.eslintrc.js) 和 [.prettierrc](mdc:.prettierrc)。

### JavaScript/TypeScript 规范

1. **函数实现**：
   - 每个工具函数都应该有清晰的注释说明
   - 函数名使用驼峰命名法
   - 优先使用 ES6+ 语法特性
   - 函数应该是纯函数，避免副作用

2. **代码组织**：
   - 相关功能的函数放在同一个文件中
   - 使用模块化导出，便于测试和使用
   - 保持函数简洁，单一职责原则

3. **注释规范**：
   - 每个函数前需要有功能描述
   - 复杂逻辑需要添加行内注释
   - 示例代码使用 JSDoc 格式

### 测试规范

1. **测试文件命名**：遵循 `*.test.js` 格式
2. **测试覆盖**：每个公共函数都需要对应的测试用例
3. **测试描述**：使用清晰的测试描述，说明测试的场景
4. **断言**：使用 Jest 的断言方法进行验证

## 提交规范

项目使用 lint-staged 和 yorkie 进行提交前检查：
- 代码会自动格式化
- ESLint 检查必须通过
- 测试用例必须通过

## 开发工作流

1. 运行 `npm run dev` 进行开发模式构建
2. 运行 `npm test` 执行测试
3. 运行 `npm run lint` 检查代码规范
4. 运行 `npm run format` 格式化代码
